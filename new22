*************************** family relationships*******************************

__________________code 
% Facts
male(amara).
male(kamal).
male(nimal).
male(chinthaka).
male(shehan).
male(perera).
female(nayanaa).
female(sumanaa).
female(kusuma).
female(dinesha).
female(nethmi).
female(sumanawathee).

parent(amara, kamal).
parent(amara, nimal).
parent(amara, sumanaa).
parent(amara, kusuma).
parent(nayanaa, kamal).
parent(nayanaa, nimal).
parent(nayanaa, sumanaa).
parent(nayanaa, kusuma).
parent(perera, dinesha).
parent(perera, nayanaa).
parent(sumanawathee, dinesha).
parent(sumanawathee, nayanaa).
parent(chinthaka, shehan).
parent(chinthaka, nethmi).
parent(dinesha, shehan).
parent(dinesha, nethmi).



% Rules
father(X, Y) :- male(X), parent(X, Y).
mother(X, Y) :- female(X), parent(X, Y).

ancestor(X, Y) :- parent(X, Y).
ancestor(X, Y) :- parent(X, Z), ancestor(Z, Y).

grandparent(X, Y) :- parent(X, Z), parent(Z, Y).

cousin(X, Y) :- parent(P1, X), parent(P2, Y), P1 \= P2, grandparent(G, X), grandparent(G, Y).

---------------out puts


% Queries
% a. Find the father and mother of Sumanaa.
father(F, sumanaa).   
mother(M, sumanaa).   

% b. Find the ancestors of Shehan and Sumanas separately.
ancestor(A, shehan). 
ancestor(A, sumanaa). 

% c. Find the grandparents of Sumanaa.
grandparent(GP, sumanaa). 

% d. Find the cousins of Kusuma.
cousin(C, kusuma). 



*************************** disk moveing******************************



------------code

hanoi(1, Source, Destination, _Intermediate) :-
    write('Move disk 1 from '), write(Source), write(' to '), writeln(Destination).

hanoi(N, Source, Destination, Intermediate) :-
    N > 1,
    M is N - 1,
    hanoi(M, Source, Intermediate, Destination),
    write('Move disk '), write(N), write(' from '), write(Source), write(' to '), writeln(Destination),
    hanoi(M, Intermediate, Destination, Source).

solve_hanoi(N) :- hanoi(N, 'Source', 'Destination', 'Intermediate').


----------out put

solve_hanoi(3).


*************************** dogs and cats, large and small animals******************************


-------------code

% Facts
dog(fido).
dog(rover).
dog(tom).
dog(fred).
cat(mary).
cat(jane).
cat(harry).
cat(henry).
cat(bill).
cat(steve).

% Rules to represent large and small animals
large(fido).
large(mary).
large(fred).
large(henry).
large(bill).
large(steve).
small(harry).
small(rover).
small(jane).
small(tom).

% Rule to check if an animal chases another
chases(X, Y) :-
    (dog(X), cat(Y), small(Y); dog(X), cat(Y), small(X)),
    not((dog(X), dog(Y))).



-----------out puts

% Queries
% a. Does Fred chase Fido?
% b. Does Henry chase Fred?
% c. Does Tom chase Jane?
% d. Does Fido chase Jane?

% Run the queries to get the answers.

?- chases(fred, fido). 
?- chases(henry, fred). 
?- chases(tom, jane). 
?- chases(fido, jane). 


*************************** water jug******************************

---------code




*************************** monkey banana******************************
--------code




% Initial state: monkey is at the middle of the room, banana is at the ceiling.
at(monkey, middle).
at(banana, ceiling).

% Initial state: block is under the banana.
under(banana, block).

% Monkey can climb the block.
climb(monkey, block).

% Monkey can grasp the banana if they are at the same location.
grasp(monkey) :- at(monkey, X), at(banana, X).

% Monkey can reach the banana if it's not grasped yet.
canreach(banana, monkey) :- at(monkey, middle), at(banana, ceiling).
canreach(banana, monkey) :- at(monkey, middle), under(banana, block).

% Monkey can get the banana if it can reach and grasp it.
canget(banana, monkey) :- canreach(banana, monkey), grasp(monkey).


------out put



 canget(banana, monkey).


*************************** adding numbers ******************************
----------code
% Base case: When the list is empty, the sum is 0.
sum_list([], 0).

% Recursive case: Sum the head of the list with the sum of the rest of the list.
sum_list([Head | Tail], Sum) :-
    sum_list(Tail, RestSum),
    Sum is Head + RestSum.



% Example usage:
?- sum_list([1, 2, 3, 4, 5], Sum).
% Sum will contain the result: 15





% Base case: Division by 0 is not allowed.
divide(_, 0, 'Cannot divide by zero').

% Division rule: Divide the first number by the second number.
divide(X, Y, Result) :-
    Y \= 0,
    Result is X / Y.


% Example usage:
?- divide(10, 2, Result).
% Result will contain the result: 5.0



% Multiplication rule: Multiply two numbers.
multiply(X, Y, Result) :-
    Result is X * Y.


% Example usage:
?- multiply(5, 3, Result).
% Result will contain the result: 15



*************************** star paten ******************************

---------code

% Base case: When N is 0, there's no need to print stars.
stars(0, _).

% Recursive predicate to print N stars and decrement N for the next line.
stars(N, N) :-
    N > 0,
    write('* '),
    N1 is N - 1,
    stars(N1, N1).

% Recursive predicate to print N stars and increment N for the next line.
stars(N, M) :-
    N > 0,
    write('* '),
    N1 is N - 1,
    stars(N1, M).

% Predicate to generate a right-angled triangle of stars.
generate_triangle(N) :-
    generate_triangle(N, 1).

generate_triangle(N, N) :-
    stars(N, N).

generate_triangle(N, M) :-
    stars(M, M),
    nl,  % Move to the next line
    M1 is M + 1,
    generate_triangle(N, M1).


-------------out put


generate_triangle(5).
